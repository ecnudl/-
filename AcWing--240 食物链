做法：并查集，扩展域并查集+带权并查集
一。带权并查集：
#include<iostream>

using namespace std;

const int N = 5e4 + 10;

int n, k;
int p[N], d[N];
int res;

int find(int x)
{
    if (p[x] != x)
    {
        int t = find(p[x]);  //开始递归；最终用t储存根节点
        d[x] += d[p[x]];     //在递归过程中求得每个点到根节点的距离
        p[x] = t;            //将每个点的父节点指向根节点
    }

    return p[x];           //返回父节点
}

int main()
{
    cin >> n >> k;
    for (int i = 0; i < n; i++) p[i] = i;

    while (k--)
    {
        int c, x, y;
        cin >> c >> x >> y;

        int px = find(x), py = find(y);     //px,py分别储存根节点
        if (x > n || y > n)  res++;
        else if (c == 1)
        {
            if (px == py && (d[x] - d[y]) % 3) res++;
            if (px != py)
            {
                p[px] = py;
                d[px] = d[y] - d[x];         //(d[x]+d[px]-d[y])%3==0
            }
        }
        else if (c == 2)
        {
            if (px == py && (d[x] - d[y] - 1) % 3) res++;
            if (px != py)
            {
                p[px] = py;
                d[px] = d[y] + 1 - d[x];          //(d[x]+d[px]-d[y]-1)%3==0
            }
        }
    }

    cout << res;

    return 0;
}
扩展域并查集：

/*********************************************************/
首先， 在带扩展域的并查集 中 x 不再只是一个 值，而是一个事件； 
规定    x       为 "事件 x 为 A 类动物"；
规定  x + N     为 "事件 x 为 B 类动物"；
规定 x + N * 2  为 "事件 x 为 C 类动物"；

p[find(X)] = find(Y) 表示 
        事件 X 为 A 类动物 和 事件 Y 为 A 类动物 同时发生

X 与 Y 为同种动物 等价于 
        p[ find(X) ] = find(Y);
        p[ find(X + N)] = find(Y + N);
        p[ find(X + N * 2)] = find(Y + N * 2);



p[find(X)] = find(Y + N) 表示
        事件 X 为 A 类动物 和 事件 Y 为 B 类动物 同时发生

X 吃 Y 等价于
        p[ find(X) ] = find(Y + N);
        p[ find(X + N)] = find(Y + N * 2);
        p[ find(X + N * 2)] = find(Y);
/******************************************************/

#include<iostream>

using namespace std;

const int N = 5e4 + 10, M = N * 3;

int n, m;
int p[M];

inline int find(int x)
{
    if (p[x] != x) p[x] = find(p[x]);
    return p[x];
}

int main()
{
    cin >> n >> m;
    for (int i = 1; i < M; i++) p[i] = i;

    int res = 0;
    while (m--)
    {
        int d, a, b;
        scanf("%d%d%d", &d, &a, &b);

        if (a > n || b > n) 
        {
            res ++;
            continue;
        }

        if (a == b)
        {
            if (d == 2) res ++;
            continue;
        }

        if (d == 1)
        {
            // 如果 a 吃 b 或者 b 吃 a ，则 a 与 b 是同类是假话
            if (find(a) == find(b + N) || find(a + N) == find(b))
            {
                res++;
                continue;
            }

            p[find(a)] = find(b);
            p[find(a + N)] = find(b + N);
            p[find(a + N * 2)] = find(b + N * 2);
        }
        else
        {
            // 如果 b 吃 a 或者 a 与 b 是同类 ，则 a 吃 b 是假话
            if (find(a + N) == find(b) || find(a) == find(b))
            {
                res++;
                continue;
            }

            p[find(a)] = find(b + N);
            p[find(a + N)] = find(b + N * 2);
            p[find(a + N * 2)] = find(b);
        }
    }

    cout << res;

    return 0;
}
