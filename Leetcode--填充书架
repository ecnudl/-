动态规划，比较奇特的一种
动态规划，用 dp[i] 表示放置前 i 本书所需要的书架最小高度，初始值 dp[0] = 0，其他为最大值 1000*1000。
遍历每一本书，把当前这本书作为书架最后一层的最后一本书，将这本书之前的书向后调整，看看是否可以减少之前的书架高度。
状态转移方程为 dp[i] = min(dp[i] , dp[j - 1] + h)，其中 j 表示最后一层所能容下书籍的索引，h 表示最后一层最大高度。
class Solution {
public:
    int minHeightShelves(vector<vector<int>>& books, int shelfWidth) {
        int n = books.size();
        vector<int> dp(n+1,1000000);
        dp[0] = 0;
        for(int i = 0;i < n;i++)
        {
            int maxwidth = 0,maxhight = 0;
            for(int j = i;j >= 0;j--)
            {
                maxwidth += books[j][0];
                if(maxwidth > shelfWidth) break;
                maxhight = max(maxhight,books[j][1]);
                dp[i+1] = min(dp[i+1],dp[j]+maxhight);
            }
        }
        return dp[n];
    }
};
